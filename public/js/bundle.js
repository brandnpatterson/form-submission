!function(e){function t(a){if(n[a])return n[a].exports;var r=n[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,t),r.l=!0,r.exports}var n={};t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,a){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:a})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=8)}([function(e,t,n){"use strict";e.exports={data:[{placeholder:"Name",regex:"[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$",error:"Please enter letters only"},{placeholder:"Email",regex:"^[a-zA-Z0-9]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+)*$",error:"Please enter a valid email"},{placeholder:"Phone",regex:"^[2-9]{2}[0-9]{8}$",error:"Please enter a 10 digit phone number"},{placeholder:"Address",regex:"^(?!s*$).+",error:"Please enter your address"}]}},function(e,t,n){"use strict";var a=e.exports={data:[],init:function(){this.cacheDOM(),this.handleCall()},cacheDOM:function(){this.catData=document.getElementById("cat-data"),this.dogData=document.getElementById("dog-data"),this.getDataButton=document.querySelector(".get-data")},handleCall:function(){var e=new XMLHttpRequest;e.onreadystatechange=function(){if(4==this.readyState&&200==this.status){var e=JSON.parse(this.responseText);a.data=e,console.log(e)}},e.open("GET","https://form-component-api.herokuapp.com/api/v1/submissions",!0),e.send()},render:function(){var e=this.data,t=this.catData,n=this.dogData;0!==e.length&&(e.map(function(e){var a=document.createElement("li"),r=document.createElement("li");a.innerHTML="\n          "+e.name+" answered "+e.cat+"!",r.innerHTML="\n          "+e.name+" answered "+e.dog+"!",t.appendChild(a),n.appendChild(r)}),this.getDataButton.style.display="none")}};a.init()},function(e,t,n){"use strict";var a=n(3),r=function(e){return e&&e.__esModule?e:{default:e}}(a);(e.exports={data:{},init:function(){this.cacheDOM()},cacheDOM:function(){this.name=document.getElementById("name"),this.email=document.getElementById("email"),this.phone=document.getElementById("phone"),this.address=document.getElementById("address"),this.yesCat=document.getElementById("yes-cat"),this.yesDog=document.getElementById("yes-dog")},send:function(){if(!1===r.default.errors){console.log(r.default.errors),this.handleData();var e=this.data,t=new XMLHttpRequest;t.open("POST","https://form-component-api.herokuapp.com/api/v1/submissions",!0),t.setRequestHeader("Content-Type","application/json; charset=UTF-8"),t.send(JSON.stringify(e))}},handleData:function(){this.data={name:this.name.value,email:this.email.value,phone:this.phone.value,address:this.address.value,cat:"no",dog:"no"},this.yesCat.checked&&(this.data.cat="yes"),this.yesDog.checked&&(this.data.dog="yes")}}).init()},function(e,t,n){"use strict";var a=n(0),r=function(e){return e&&e.__esModule?e:{default:e}}(a),i=e.exports={errors:null,validate:function(e){e.map(function(e,t){var n=e.nextSibling,a=n.nextSibling;e.value.match(r.default.data[t].regex)?(a.textContent="âœ…",a.classList.remove("input-fail"),a.classList.add("input-success"),e.dataset.error="false"):""===e.value?event.preventDefault():(a.textContent=r.default.data[t].error,a.classList.remove("input-success"),a.classList.add("input-fail"),e.dataset.error="true"),0!=i.errors&&event.preventDefault()},this);var t=function(e){return"false"===e.dataset.error};e.every(t)?i.errors=!1:i.errors=!0}}},function(e,t,n){"use strict";n(5),n(1),n(2)},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}var r=n(6),i=n(7),o=n(3),s=n(1),d=a(s),u=n(2),c=a(u);({init:function(){this.cacheDOM(),this.bindEvents(),(0,r.init)(this.required)},cacheDOM:function(){this.form=document.querySelector(".form"),this.getData=document.querySelector(".get-data"),this.postData=document.querySelector(".post-data");var e=document.querySelector("#name"),t=document.querySelector("#email"),n=document.querySelector("#phone"),a=document.querySelector("#address");this.required=[e,t,n,a]},bindEvents:function(){(0,i.testForElement)(this.postData,"click",this.sendData.bind(this)),(0,i.testForElement)(this.getData,"click",this.handleRender.bind(this)),(0,i.testForElement)(this.form,"mouseover",this.liveValidation.bind(this)),(0,i.testForElement)(this.form,"mouseover",this.placeholdersToggle.bind(this))},handleRender:function(){d.default.render()},sendData:function(){c.default.send()},liveValidation:function(e){"radio"!==e.target.type&&(0,o.validate)(this.required)},placeholdersToggle:function(e){(0,r.toggle)(this.required)}}).init()},function(e,t,n){"use strict";var a=n(0),r=function(e){return e&&e.__esModule?e:{default:e}}(a);e.exports={init:function(e){e.map(function(e,t){e&&(e.placeholder=r.default.data[t].placeholder)},this)},toggle:function(e){e.map(function(e,t){event.target!=e?e.placeholder=r.default.data[t].placeholder:e.placeholder=""},this)}}},function(e,t,n){"use strict";e.exports={testForElement:function(e,t,n){e&&e.addEventListener(t,n)}}},function(e,t,n){e.exports=n(4)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,